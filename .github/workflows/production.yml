name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read

jobs:
  # Enhanced Security Checks for Production
  security:
    name: Production Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with strict rules
        run: npm run lint -- --max-warnings 0

      - name: TypeScript strict check
        run: npx tsc --noEmit --strict

      - name: Security audit (high severity only)
        run: npm audit --audit-level high

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Comprehensive Testing
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: security
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup production-like database
        run: |
          mkdir -p prisma/data
          touch prisma/data/prod-test.db

      - name: Run Prisma migrations
        run: npx prisma db push
        env:
          DATABASE_URL: "file:./prisma/data/prod-test.db"

      - name: Build application (production mode)
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_PRODUCTION }}
          NEXTAUTH_URL: https://dnd-recorder-prod.fly.dev
          DATABASE_URL: "file:./prisma/data/prod-test.db"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests on ${{ matrix.browser }}
        run: npm test -- --project=${{ matrix.browser }}
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_PRODUCTION }}
          NEXTAUTH_URL: http://localhost:3000
          DATABASE_URL: "file:./prisma/data/prod-test.db"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # Production Docker Build
  docker:
    name: Production Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=prod-
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run comprehensive vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Production Deployment (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://dnd-recorder-prod.fly.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Backup Production Database
        run: |
          echo "Creating production database backup..."
          flyctl ssh console --config fly.toml -C "sqlite3 /app/data/production.db '.backup /app/data/backup-$(date +%Y%m%d-%H%M%S).db'"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Production (Blue-Green)
        run: |
          echo "Deploying to production with zero-downtime..."
          flyctl deploy --config fly.toml --remote-only --strategy bluegreen
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run Database Migrations
        run: |
          echo "Running production database migrations..."
          flyctl ssh console --config fly.toml -C "cd /app && npx prisma db push"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health Check & Verification
        run: |
          echo "Performing comprehensive health checks..."
          sleep 60
          
          # Basic health check
          curl -f https://dnd-recorder-prod.fly.dev/api/health || exit 1
          
          # Check authentication endpoints
          curl -f https://dnd-recorder-prod.fly.dev/auth/signin || exit 1
          
          # Check main page loads
          curl -f https://dnd-recorder-prod.fly.dev/ || exit 1
          
          echo "‚úÖ All health checks passed!"

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed, initiating rollback..."
          flyctl releases rollback --config fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Post-Deployment Monitoring
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Monitor Application Performance
        run: |
          echo "üîç Starting post-deployment monitoring..."
          
          # Monitor for 5 minutes to ensure stability
          for i in {1..10}; do
            echo "Health check $i/10..."
            curl -f https://dnd-recorder-prod.fly.dev/api/health
            sleep 30
          done
          
          echo "‚úÖ Monitoring complete - application is stable"

      - name: Update deployment status
        run: |
          echo "üéâ Production deployment successful!"
          echo "üåê Production URL: https://dnd-recorder-prod.fly.dev"
          echo "üìä Monitoring dashboard: https://fly.io/apps/dnd-recorder-prod"

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy-production.result == 'success' && needs.monitor.result == 'success'
        run: |
          echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL! üéâ"
          echo "üöÄ App URL: https://dnd-recorder-prod.fly.dev"
          echo "‚úÖ All health checks passed"
          echo "üìà Monitoring shows stable performance"
          # Add success webhook notification here
          
      - name: Notify Failure
        if: needs.deploy-production.result == 'failure' || needs.monitor.result == 'failure'
        run: |
          echo "üö® PRODUCTION DEPLOYMENT FAILED! üö®"
          echo "üîÑ Automatic rollback initiated"
          echo "üìû Manual intervention may be required"
          # Add failure webhook notification here
          exit 1