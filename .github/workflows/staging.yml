name: Staging Deployment

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Audit dependencies
        run: npm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Build and Test
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security
    
    services:
      # We'll use SQLite for testing, but this shows how to add other services
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          mkdir -p prisma/data
          touch prisma/data/test.db

      - name: Run Prisma migrations
        run: npx prisma db push
        env:
          DATABASE_URL: "file:./prisma/data/test.db"

      - name: Build application
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_STAGING }}
          NEXTAUTH_URL: https://dnd-recorder-staging.fly.dev
          DATABASE_URL: "file:./prisma/data/test.db"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm test
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET_STAGING }}
          NEXTAUTH_URL: http://localhost:3000
          DATABASE_URL: "file:./prisma/data/test.db"
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-staging
          path: playwright-report/
          retention-days: 30

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' # Only on push to staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, test, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io Staging
        run: flyctl deploy --config fly.staging.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health Check
        run: |
          echo "Waiting for deployment to be healthy..."
          sleep 30
          curl -f https://dnd-recorder-staging.fly.dev/api/health || exit 1

      - name: Run Smoke Tests
        run: |
          echo "Running post-deployment smoke tests..."
          curl -f https://dnd-recorder-staging.fly.dev/ || exit 1
          curl -f https://dnd-recorder-staging.fly.dev/auth/signin || exit 1

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "üöÄ App URL: https://dnd-recorder-staging.fly.dev"
          # Add Slack/Discord webhook here if desired
          
      - name: Notify Failure
        if: needs.deploy-staging.result == 'failure'
        run: |
          echo "‚ùå Staging deployment failed!"
          # Add failure notification here
          exit 1